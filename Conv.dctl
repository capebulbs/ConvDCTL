/************
Conv ver 2.0 by Passiflora Tsui
for using convolution in Davinci Resolve
************/

DEFINE_UI_PARAMS(ker11, Row 1 Col 1, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(ker12, Row 1 Col 2, DCTLUI_VALUE_BOX, -1.0)
DEFINE_UI_PARAMS(ker13, Row 1 Col 3, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(ker21, Row 2 Col 1, DCTLUI_VALUE_BOX, -1.0)
DEFINE_UI_PARAMS(ker22, Row 2 Col 2, DCTLUI_VALUE_BOX, 4.0)
DEFINE_UI_PARAMS(ker23, Row 2 Col 3, DCTLUI_VALUE_BOX, -1.0)
DEFINE_UI_PARAMS(ker31, Row 3 Col 1, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(ker32, Row 3 Col 2, DCTLUI_VALUE_BOX, -1.0)
DEFINE_UI_PARAMS(ker33, Row 3 Col 3, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(coef, Coefficient, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(coefR, Red Coefficient, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(coefG, Green Coefficient, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(coefB, Blue Coefficient, DCTLUI_VALUE_BOX, 1.0)
DEFINE_UI_PARAMS(offsetR, Red Coefficient, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offsetG, Green Coefficient, DCTLUI_VALUE_BOX, 0.0)
DEFINE_UI_PARAMS(offsetB, Blue Coefficient, DCTLUI_VALUE_BOX, 0.0)

__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, __TEXTURE__ p_TexR, __TEXTURE__ p_TexG, __TEXTURE__ p_TexB)
{
		const float r = offsetR + (coef + coefR) * (
		ker11 * (p_X * p_Y > 0? _tex2D(p_TexR, p_X - 1, p_Y - 1) : 0) + 
		ker12 * (p_Y > 0? _tex2D(p_TexR, p_X, p_Y - 1) : 0) + 
		ker13 * (p_Y * (p_Width - p_X - 1) > 0? _tex2D(p_TexR, p_X + 1, p_Y - 1) : 0) + 
		ker21 * (p_X > 0? _tex2D(p_TexR, p_X - 1, p_Y) : 0) + 
		ker22 * _tex2D(p_TexR, p_X, p_Y) + 
		ker23 * (p_Width - p_X - 1 > 0? _tex2D(p_TexR, p_X + 1, p_Y) : 0) + 
		ker31 * (p_X * (p_Height - p_Y - 1) > 0? _tex2D(p_TexR, p_X - 1, p_Y + 1) : 0) + 
		ker32 * (p_Height - p_Y - 1 > 0? _tex2D(p_TexR, p_X, p_Y + 1) : 0) + 
		ker33 * ((p_Width - p_X - 1) * (p_Height - p_Y - 1) > 0? _tex2D(p_TexR, p_X + 1, p_Y + 1) : 0)
	);
	
	const float g = offsetG + (coef + coefG) * (
		ker11 * (p_X * p_Y > 0? _tex2D(p_TexG, p_X - 1, p_Y - 1) : 0) + 
		ker12 * (p_Y > 0? _tex2D(p_TexG, p_X, p_Y - 1) : 0) + 
		ker13 * (p_Y * (p_Width - p_X - 1) > 0? _tex2D(p_TexG, p_X + 1, p_Y - 1) : 0) + 
		ker21 * (p_X > 0? _tex2D(p_TexG, p_X - 1, p_Y) : 0) + 
		ker22 * _tex2D(p_TexG, p_X, p_Y) + 
		ker23 * (p_Width - p_X - 1 > 0? _tex2D(p_TexG, p_X + 1, p_Y) : 0) + 
		ker31 * (p_X * (p_Height - p_Y - 1) > 0? _tex2D(p_TexG, p_X - 1, p_Y + 1) : 0) + 
		ker32 * (p_Height - p_Y - 1 > 0? _tex2D(p_TexG, p_X, p_Y + 1) : 0) + 
		ker33 * ((p_Width - p_X - 1) * (p_Height - p_Y - 1) > 0? _tex2D(p_TexG, p_X + 1, p_Y + 1) : 0)
	);
	
	const float b = offsetB + (coef + coefB) * (
		ker11 * (p_X * p_Y > 0? _tex2D(p_TexB, p_X - 1, p_Y - 1) : 0) + 
		ker12 * (p_Y > 0? _tex2D(p_TexB, p_X, p_Y - 1) : 0) + 
		ker13 * (p_Y * (p_Width - p_X - 1) > 0? _tex2D(p_TexB, p_X + 1, p_Y - 1) : 0) + 
		ker21 * (p_X > 0? _tex2D(p_TexB, p_X - 1, p_Y) : 0) + 
		ker22 * _tex2D(p_TexB, p_X, p_Y) + 
		ker23 * (p_Width - p_X - 1 > 0? _tex2D(p_TexB, p_X + 1, p_Y) : 0) + 
		ker31 * (p_X * (p_Height - p_Y - 1) > 0? _tex2D(p_TexB, p_X - 1, p_Y + 1) : 0) + 
		ker32 * (p_Height - p_Y - 1 > 0? _tex2D(p_TexB, p_X, p_Y + 1) : 0) + 
		ker33 * ((p_Width - p_X - 1) * (p_Height - p_Y - 1) > 0? _tex2D(p_TexB, p_X + 1, p_Y + 1) : 0)
	);               
	
	return make_float3(r, g, b);
} 	
